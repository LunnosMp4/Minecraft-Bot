{"version":3,"file":"ICrypto.js","sources":["../../src/crypto/ICrypto.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError } from \"../error/AuthError\";\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\nimport { SignedHttpRequest } from \"./SignedHttpRequest\";\n\n/**\n * The PkceCodes type describes the structure\n * of objects that contain PKCE code\n * challenge and verifier pairs\n */\nexport type PkceCodes = {\n    verifier: string,\n    challenge: string\n};\n\nexport type SignedHttpRequestParameters = Pick<BaseAuthRequest, \"resourceRequestMethod\" | \"resourceRequestUri\" | \"shrClaims\" | \"shrNonce\">;\n\n/**\n * Interface for crypto functions used by library\n */\nexport interface ICrypto {\n    /**\n     * Creates a guid randomly.\n     */\n    createNewGuid(): string;\n    /**\n     * base64 Encode string\n     * @param input \n     */\n    base64Encode(input: string): string;\n    /**\n     * base64 decode string\n     * @param input \n     */\n    base64Decode(input: string): string;\n    /**\n     * Generate PKCE codes for OAuth. See RFC here: https://tools.ietf.org/html/rfc7636\n     */\n    generatePkceCodes(): Promise<PkceCodes>;\n    /**\n     * Generates an JWK RSA S256 Thumbprint\n     * @param request\n     */\n    getPublicKeyThumbprint(request: SignedHttpRequestParameters): Promise<string>;\n    /**\n     * Removes cryptographic keypair from key store matching the keyId passed in\n     * @param kid \n     */\n    removeTokenBindingKey(kid: string): Promise<boolean>;\n    /**\n     * Removes all cryptographic keys from IndexedDB storage\n     */\n    clearKeystore(): Promise<boolean>;\n    /** \n     * Returns a signed proof-of-possession token with a given acces token that contains a cnf claim with the required kid.\n     * @param accessToken \n     */\n    signJwt(payload: SignedHttpRequest, kid: string): Promise<string>;\n    /**\n     * Returns the SHA-256 hash of an input string\n     * @param plainText\n     */\n    hashString(plainText: string): Promise<string>;\n}\n\nexport const DEFAULT_CRYPTO_IMPLEMENTATION: ICrypto = {\n    createNewGuid: (): string => {\n        const notImplErr = \"Crypto interface - createNewGuid() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    base64Decode: (): string => {\n        const notImplErr = \"Crypto interface - base64Decode() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    base64Encode: (): string => {\n        const notImplErr = \"Crypto interface - base64Encode() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async generatePkceCodes(): Promise<PkceCodes> {\n        const notImplErr = \"Crypto interface - generatePkceCodes() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async getPublicKeyThumbprint(): Promise<string> {\n        const notImplErr = \"Crypto interface - getPublicKeyThumbprint() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async removeTokenBindingKey(): Promise<boolean> {\n        const notImplErr = \"Crypto interface - removeTokenBindingKey() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async clearKeystore(): Promise<boolean> {\n        const notImplErr = \"Crypto interface - clearKeystore() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async signJwt(): Promise<string> {\n        const notImplErr = \"Crypto interface - signJwt() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async hashString(): Promise<string> {\n        const notImplErr = \"Crypto interface - hashString() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n};\n"],"names":[],"mappings":";;;;;AAAA;;;;IAqEa,6BAA6B,GAAY;IAClD,aAAa,EAAE;QACX,IAAM,UAAU,GAAG,6DAA6D,CAAC;QACjF,MAAM,SAAS,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;KACrD;IACD,YAAY,EAAE;QACV,IAAM,UAAU,GAAG,4DAA4D,CAAC;QAChF,MAAM,SAAS,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;KACrD;IACD,YAAY,EAAE;QACV,IAAM,UAAU,GAAG,4DAA4D,CAAC;QAChF,MAAM,SAAS,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;KACrD;IACK,iBAAiB,EAAvB;;;;gBACU,UAAU,GAAG,iEAAiE,CAAC;gBACrF,MAAM,SAAS,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;;;KACrD;IACK,sBAAsB,EAA5B;;;;gBACU,UAAU,GAAG,sEAAsE,CAAC;gBAC1F,MAAM,SAAS,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;;;KACrD;IACK,qBAAqB,EAA3B;;;;gBACU,UAAU,GAAG,qEAAqE,CAAC;gBACzF,MAAM,SAAS,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;;;KACrD;IACK,aAAa,EAAnB;;;;gBACU,UAAU,GAAG,6DAA6D,CAAC;gBACjF,MAAM,SAAS,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;;;KACrD;IACK,OAAO,EAAb;;;;gBACU,UAAU,GAAG,uDAAuD,CAAC;gBAC3E,MAAM,SAAS,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;;;KACrD;IACK,UAAU,EAAhB;;;;gBACU,UAAU,GAAG,0DAA0D,CAAC;gBAC9E,MAAM,SAAS,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;;;KACrD;;;;;"}