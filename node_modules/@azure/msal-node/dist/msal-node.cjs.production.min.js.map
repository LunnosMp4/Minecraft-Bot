{"version":3,"file":"msal-node.cjs.production.min.js","sources":["../src/utils/Constants.ts","../src/network/HttpClient.ts","../src/config/Configuration.ts","../src/utils/NetworkUtils.ts","../src/utils/EncodingUtils.ts","../src/crypto/PkceGenerator.ts","../src/crypto/CryptoProvider.ts","../src/crypto/GuidGenerator.ts","../src/cache/serializer/Deserializer.ts","../src/cache/serializer/Serializer.ts","../src/cache/NodeStorage.ts","../src/cache/TokenCache.ts","../src/client/ClientApplication.ts","../src/packageMetadata.ts","../src/client/ClientAssertion.ts","../src/client/ConfidentialClientApplication.ts","../src/cache/distributed/DistributedCachePlugin.ts","../src/client/PublicClientApplication.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * http methods\n */\nexport enum HttpMethod {\n    GET = \"get\",\n    POST = \"post\",\n}\n\n/**\n * Constants used for region discovery\n */\nexport const REGION_ENVIRONMENT_VARIABLE = \"REGION_NAME\";\n\n/**\n * Constant used for PKCE\n */\nexport const RANDOM_OCTET_SIZE = 32;\n\n/**\n * Constants used in PKCE\n */\nexport const Hash = {\n    SHA256: \"sha256\",\n};\n\n/**\n * Constants for encoding schemes\n */\nexport const CharSet = {\n    CV_CHARSET:\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~\",\n};\n\n/**\n * Cache Constants\n */\nexport const CACHE = {\n    FILE_CACHE: \"fileCache\",\n    EXTENSION_LIB: \"extenstion_library\",\n};\n\n/**\n * Constants\n */\nexport const Constants = {\n    MSAL_SKU: \"msal.js.node\",\n    JWT_BEARER_ASSERTION_TYPE: \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\"\n};\n\n/**\n * API Codes for Telemetry purposes.\n * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs\n * 0-99 Silent Flow\n * 600-699 Device Code Flow\n * 800-899 Auth Code Flow\n */\nexport enum ApiId {\n    acquireTokenSilent = 62,\n    acquireTokenByUsernamePassword = 371,\n    acquireTokenByDeviceCode = 671,\n    acquireTokenByClientCredential = 771,\n    acquireTokenByCode = 871,\n    acquireTokenByRefreshToken = 872\n}\n\n/**\n * JWT  constants\n */\nexport const JwtConstants = {\n    ALGORITHM: \"alg\",\n    RSA_256: \"RS256\",\n    X5T: \"x5t\", \n    X5C: \"x5c\",\n    AUDIENCE: \"aud\",\n    EXPIRATION_TIME: \"exp\",\n    ISSUER: \"iss\",\n    SUBJECT: \"sub\",\n    NOT_BEFORE: \"nbf\",\n    JWT_ID: \"jti\",\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    INetworkModule,\n    NetworkRequestOptions,\n    NetworkResponse,\n} from \"@azure/msal-common\";\nimport { HttpMethod } from \"../utils/Constants\";\nimport axios, { AxiosRequestConfig } from \"axios\";\nimport createHttpsProxyAgent from \"https-proxy-agent\";\n\n/**\n * This class implements the API for network requests.\n */\nexport class HttpClient implements INetworkModule {\n\n    /**\n     * Http Get request\n     * @param url\n     * @param options\n     */\n    async sendGetRequestAsync<T>(\n        url: string,\n        options?: NetworkRequestOptions,\n    ): Promise<NetworkResponse<T>> {\n        const request: AxiosRequestConfig = {\n            method: HttpMethod.GET,\n            url: url,\n            /* istanbul ignore next */\n            headers: options && options.headers,\n            /* istanbul ignore next */\n            validateStatus: () => true,\n        };\n\n        if (options && options.proxyUrl) {\n            // for axios, this has to be disabled\n            request.proxy = false;\n            request.httpsAgent = createHttpsProxyAgent(options.proxyUrl);\n        }\n\n        const response = await axios(request);\n        return {\n            headers: response.headers,\n            body: response.data as T,\n            status: response.status,\n        };\n    }\n\n    /**\n     * Http Post request\n     * @param url\n     * @param options\n     */\n    async sendPostRequestAsync<T>(\n        url: string,\n        options?: NetworkRequestOptions,\n        cancellationToken?: number,\n    ): Promise<NetworkResponse<T>> {\n        const request: AxiosRequestConfig = {\n            method: HttpMethod.POST,\n            url: url,\n            /* istanbul ignore next */\n            data: (options && options.body) || \"\",\n            timeout: cancellationToken,\n            /* istanbul ignore next */\n            headers: options && options.headers,\n            /* istanbul ignore next */\n            validateStatus: () => true\n        };\n\n        if (options && options.proxyUrl) {\n            // for axios, this has to be disabled\n            request.proxy = false;\n            request.httpsAgent = createHttpsProxyAgent(options.proxyUrl);\n        }\n\n        const response = await axios(request);\n        return {\n            headers: response.headers,\n            body: response.data as T,\n            status: response.status,\n        };\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    LoggerOptions,\n    INetworkModule,\n    LogLevel,\n    ProtocolMode,\n    ICachePlugin,\n    Constants,\n    AzureCloudInstance,\n    AzureCloudOptions\n} from \"@azure/msal-common\";\nimport { NetworkUtils } from \"../utils/NetworkUtils\";\n\n/**\n * - clientId               - Client id of the application.\n * - authority              - Url of the authority. If no value is set, defaults to https://login.microsoftonline.com/common.\n * - knownAuthorities       - Needed for Azure B2C and ADFS. All authorities that will be used in the client application. Only the host of the authority should be passed in.\n * - clientSecret           - Secret string that the application uses when requesting a token. Only used in confidential client applications. Can be created in the Azure app registration portal.\n * - clientAssertion        - Assertion string that the application uses when requesting a token. Only used in confidential client applications. Assertion should be of type urn:ietf:params:oauth:client-assertion-type:jwt-bearer.\n * - clientCertificate      - Certificate that the application uses when requesting a token. Only used in confidential client applications. Requires hex encoded X.509 SHA-1 thumbprint of the certificiate, and the PEM encoded private key (string should contain -----BEGIN PRIVATE KEY----- ... -----END PRIVATE KEY----- )\n * - protocolMode           - Enum that represents the protocol that msal follows. Used for configuring proper endpoints.\n * @public\n */\nexport type NodeAuthOptions = {\n    clientId: string;\n    authority?: string;\n    clientSecret?: string;\n    clientAssertion?:string;\n    clientCertificate?: {\n        thumbprint: string,\n        privateKey: string,\n        x5c?: string\n    };\n    knownAuthorities?: Array<string>;\n    cloudDiscoveryMetadata?: string;\n    authorityMetadata?: string;\n    clientCapabilities?: Array<string>;\n    protocolMode?: ProtocolMode;\n    azureCloudOptions?: AzureCloudOptions;\n};\n\n/**\n * Use this to configure the below cache configuration options:\n *\n * - cachePlugin   - Plugin for reading and writing token cache to disk.\n * @public\n */\nexport type CacheOptions = {\n    cachePlugin?: ICachePlugin;\n};\n\n/**\n * Type for configuring logger and http client options\n *\n * - logger                       - Used to initialize the Logger object; TODO: Expand on logger details or link to the documentation on logger\n * - networkClient                - Http client used for all http get and post calls. Defaults to using MSAL's default http client.\n * @public\n */\nexport type NodeSystemOptions = {\n    loggerOptions?: LoggerOptions;\n    networkClient?: INetworkModule;\n    proxyUrl?: string;\n};\n\n/**\n * Use the configuration object to configure MSAL and initialize the client application object\n *\n * - auth: this is where you configure auth elements like clientID, authority used for authenticating against the Microsoft Identity Platform\n * - cache: this is where you configure cache location\n * - system: this is where you can configure the network client, logger\n * @public\n */\nexport type Configuration = {\n    auth: NodeAuthOptions;\n    cache?: CacheOptions;\n    system?: NodeSystemOptions;\n};\n\nconst DEFAULT_AUTH_OPTIONS: Required<NodeAuthOptions> = {\n    clientId: \"\",\n    authority: Constants.DEFAULT_AUTHORITY,\n    clientSecret: \"\",\n    clientAssertion: \"\",\n    clientCertificate: {\n        thumbprint: \"\",\n        privateKey: \"\",\n        x5c: \"\"\n    },\n    knownAuthorities: [],\n    cloudDiscoveryMetadata: \"\",\n    authorityMetadata: \"\",\n    clientCapabilities: [],\n    protocolMode: ProtocolMode.AAD,\n    azureCloudOptions: {\n        azureCloudInstance: AzureCloudInstance.None,\n        tenant: \"\"\n    }\n};\n\nconst DEFAULT_CACHE_OPTIONS: CacheOptions = {};\n\nconst DEFAULT_LOGGER_OPTIONS: LoggerOptions = {\n    loggerCallback: (): void => {\n        // allow users to not set logger call back\n    },\n    piiLoggingEnabled: false,\n    logLevel: LogLevel.Info,\n};\n\nconst DEFAULT_SYSTEM_OPTIONS: Required<NodeSystemOptions> = {\n    loggerOptions: DEFAULT_LOGGER_OPTIONS,\n    networkClient: NetworkUtils.getNetworkClient(),\n    proxyUrl: \"\",\n};\n\nexport type NodeConfiguration = {\n    auth: Required<NodeAuthOptions>;\n    cache: CacheOptions;\n    system: Required<NodeSystemOptions>;\n};\n\n/**\n * Sets the default options when not explicitly configured from app developer\n *\n * @param auth - Authentication options\n * @param cache - Cache options\n * @param system - System options\n *\n * @returns Configuration\n * @public\n */\nexport function buildAppConfiguration({\n    auth,\n    cache,\n    system,\n}: Configuration): NodeConfiguration {\n\n    return {\n        auth: { ...DEFAULT_AUTH_OPTIONS, ...auth },\n        cache: { ...DEFAULT_CACHE_OPTIONS, ...cache },\n        system: { ...DEFAULT_SYSTEM_OPTIONS, ...system },\n    };\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { INetworkModule } from \"@azure/msal-common\";\nimport { HttpClient } from \"../network/HttpClient\";\n\nexport class NetworkUtils {\n    /**\n     * Returns best compatible network client object.\n     */\n    static getNetworkClient(): INetworkModule {\n        return new HttpClient();\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nexport class EncodingUtils {\n    /**\n     * 'utf8': Multibyte encoded Unicode characters. Many web pages and other document formats use UTF-8.\n     * 'base64': Base64 encoding.\n     *\n     * @param str text\n     */\n    static base64Encode(str: string, encoding?: BufferEncoding): string {\n        return Buffer.from(str, encoding).toString(\"base64\");\n    }\n\n    /**\n     * encode a URL\n     * @param str\n     */\n    static base64EncodeUrl(str: string, encoding?: BufferEncoding): string {\n        return EncodingUtils.base64Encode(str, encoding)\n            .replace(/=/g, \"\")\n            .replace(/\\+/g, \"-\")\n            .replace(/\\//g, \"_\");\n    }\n\n    /**\n     * 'utf8': Multibyte encoded Unicode characters. Many web pages and other document formats use UTF-8.\n     * 'base64': Base64 encoding.\n     *\n     * @param base64Str Base64 encoded text\n     */\n    static base64Decode(base64Str: string): string {\n        return Buffer.from(base64Str, \"base64\").toString(\"utf8\");\n    }\n\n    /**\n     * @param base64Str Base64 encoded Url\n     */\n    static base64DecodeUrl(base64Str: string): string {\n        let str = base64Str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n        while (str.length % 4) {\n            str += \"=\";\n        }\n        return EncodingUtils.base64Decode(str);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { PkceCodes } from \"@azure/msal-common\";\nimport { CharSet, Hash, RANDOM_OCTET_SIZE } from \"../utils/Constants\";\nimport { EncodingUtils } from \"../utils/EncodingUtils\";\nimport crypto from \"crypto\";\n\n/**\n * https://tools.ietf.org/html/rfc7636#page-8\n */\nexport class PkceGenerator {\n    /**\n     * generates the codeVerfier and the challenge from the codeVerfier\n     * reference: https://tools.ietf.org/html/rfc7636#section-4.1 and https://tools.ietf.org/html/rfc7636#section-4.2\n     */\n    async generatePkceCodes(): Promise<PkceCodes> {\n        const verifier = this.generateCodeVerifier();\n        const challenge = this.generateCodeChallengeFromVerifier(verifier);\n        return { verifier, challenge };\n    }\n\n    /**\n     * generates the codeVerfier; reference: https://tools.ietf.org/html/rfc7636#section-4.1\n     */\n    private generateCodeVerifier(): string {\n        const charArr = [];\n        const maxNumber = 256 - (256 % CharSet.CV_CHARSET.length);\n        while (charArr.length <= RANDOM_OCTET_SIZE) {\n            const byte = crypto.randomBytes(1)[0];\n            if (byte >= maxNumber) {\n                /* \n                 * Ignore this number to maintain randomness.\n                 * Including it would result in an unequal distribution of characters after doing the modulo\n                 */\n                continue;\n            }\n            const index = byte % CharSet.CV_CHARSET.length;\n            charArr.push(CharSet.CV_CHARSET[index]);\n        }\n        const verifier: string = charArr.join(\"\");\n        return EncodingUtils.base64EncodeUrl(verifier);\n    }\n\n    /**\n     * generate the challenge from the codeVerfier; reference: https://tools.ietf.org/html/rfc7636#section-4.2\n     * @param codeVerifier\n     */\n    private generateCodeChallengeFromVerifier(codeVerifier: string): string {\n        return EncodingUtils.base64EncodeUrl(\n            this.sha256(codeVerifier).toString(\"base64\"), \n            \"base64\"\n        );\n    }\n\n    /**\n     * generate 'SHA256' hash\n     * @param buffer\n     */\n    private sha256(buffer: string): Buffer {\n        return crypto\n            .createHash(Hash.SHA256)\n            .update(buffer)\n            .digest();\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ICrypto, PkceCodes } from \"@azure/msal-common\";\nimport { GuidGenerator } from \"./GuidGenerator\";\nimport { EncodingUtils } from \"../utils/EncodingUtils\";\nimport { PkceGenerator } from \"./PkceGenerator\";\n\n/**\n * This class implements MSAL node's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\n * @public\n */\nexport class CryptoProvider implements ICrypto {\n    private pkceGenerator: PkceGenerator;\n\n    constructor() {\n        // Browser crypto needs to be validated first before any other classes can be set.\n        this.pkceGenerator = new PkceGenerator();\n    }\n\n    /**\n     * Creates a new random GUID - used to populate state and nonce.\n     * @returns string (GUID)\n     */\n    createNewGuid(): string {\n        return GuidGenerator.generateGuid();\n    }\n\n    /**\n     * Encodes input string to base64.\n     * @param input - string to be encoded\n     */\n    base64Encode(input: string): string {\n        return EncodingUtils.base64Encode(input);\n    }\n\n    /**\n     * Decodes input string from base64.\n     * @param input - string to be decoded\n     */\n    base64Decode(input: string): string {\n        return EncodingUtils.base64Decode(input);\n    }\n\n    /**\n     * Generates PKCE codes used in Authorization Code Flow.\n     */\n    generatePkceCodes(): Promise<PkceCodes> {\n        return this.pkceGenerator.generatePkceCodes();\n    }\n\n    /**\n     * Generates a keypair, stores it and returns a thumbprint - not yet implemented for node\n     */\n    getPublicKeyThumbprint(): Promise<string> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Removes cryptographic keypair from key store matching the keyId passed in\n     * @param kid \n     */\n    removeTokenBindingKey(): Promise<boolean> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Removes all cryptographic keys from Keystore\n     */\n    clearKeystore(): Promise<boolean> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Signs the given object as a jwt payload with private key retrieved by given kid - currently not implemented for node\n     */\n    signJwt(): Promise<string> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Returns the SHA-256 hash of an input string\n     */\n    hashString(): Promise<string> {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport class GuidGenerator {\n    /**\n     *\n     * RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or pseudo-random numbers.\n     * uuidv4 generates guids from cryprtographically-string random\n     */\n    static generateGuid(): string {\n        return uuidv4();\n    }\n\n    /**\n     * verifies if a string is  GUID\n     * @param guid\n     */\n    static isGuid(guid: string): boolean {\n        const regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n        return regexGuid.test(guid);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StringUtils, AccountCache, IdTokenCache, AccessTokenCache, RefreshTokenCache, AppMetadataCache, AccountEntity, IdTokenEntity, AccessTokenEntity, RefreshTokenEntity, AppMetadataEntity, CacheManager } from \"@azure/msal-common\";\nimport { JsonCache, InMemoryCache, SerializedAccountEntity, SerializedIdTokenEntity, SerializedAccessTokenEntity, SerializedRefreshTokenEntity, SerializedAppMetadataEntity } from \"./SerializerTypes\";\n\n/**\n * This class deserializes cache entities read from the file into in memory object types defined internally\n */\nexport class Deserializer {\n    /**\n     * Parse the JSON blob in memory and deserialize the content\n     * @param cachedJson\n     */\n    static deserializeJSONBlob(jsonFile: string): JsonCache {\n        const deserializedCache = StringUtils.isEmpty(jsonFile)\n            ? {}\n            : JSON.parse(jsonFile);\n        return deserializedCache;\n    }\n\n    /**\n     * Deserializes accounts to AccountEntity objects\n     * @param accounts\n     */\n    static deserializeAccounts(accounts: Record<string, SerializedAccountEntity>): AccountCache {\n        const accountObjects: AccountCache = {};\n        if (accounts) {\n            Object.keys(accounts).map(function (key) {\n                const serializedAcc = accounts[key];\n                const mappedAcc = {\n                    homeAccountId: serializedAcc.home_account_id,\n                    environment: serializedAcc.environment,\n                    realm: serializedAcc.realm,\n                    localAccountId: serializedAcc.local_account_id,\n                    username: serializedAcc.username,\n                    authorityType: serializedAcc.authority_type,\n                    name: serializedAcc.name,\n                    clientInfo: serializedAcc.client_info,\n                    lastModificationTime: serializedAcc.last_modification_time,\n                    lastModificationApp: serializedAcc.last_modification_app,\n                };\n                const account: AccountEntity = new AccountEntity();\n                CacheManager.toObject(account, mappedAcc);\n                accountObjects[key] = account;\n            });\n        }\n\n        return accountObjects;\n    }\n\n    /**\n     * Deserializes id tokens to IdTokenEntity objects\n     * @param idTokens\n     */\n    static deserializeIdTokens(idTokens: Record<string, SerializedIdTokenEntity>): IdTokenCache {\n        const idObjects: IdTokenCache = {};\n        if (idTokens) {\n            Object.keys(idTokens).map(function (key) {\n                const serializedIdT = idTokens[key];\n                const mappedIdT = {\n                    homeAccountId: serializedIdT.home_account_id,\n                    environment: serializedIdT.environment,\n                    credentialType: serializedIdT.credential_type,\n                    clientId: serializedIdT.client_id,\n                    secret: serializedIdT.secret,\n                    realm: serializedIdT.realm,\n                };\n                const idToken: IdTokenEntity = new IdTokenEntity();\n                CacheManager.toObject(idToken, mappedIdT);\n                idObjects[key] = idToken;\n            });\n        }\n        return idObjects;\n    }\n\n    /**\n     * Deserializes access tokens to AccessTokenEntity objects\n     * @param accessTokens\n     */\n    static deserializeAccessTokens(accessTokens: Record<string, SerializedAccessTokenEntity>): AccessTokenCache {\n        const atObjects: AccessTokenCache = {};\n        if (accessTokens) {\n            Object.keys(accessTokens).map(function (key) {\n                const serializedAT = accessTokens[key];\n                const mappedAT = {\n                    homeAccountId: serializedAT.home_account_id,\n                    environment: serializedAT.environment,\n                    credentialType: serializedAT.credential_type,\n                    clientId: serializedAT.client_id,\n                    secret: serializedAT.secret,\n                    realm: serializedAT.realm,\n                    target: serializedAT.target,\n                    cachedAt: serializedAT.cached_at,\n                    expiresOn: serializedAT.expires_on,\n                    extendedExpiresOn: serializedAT.extended_expires_on,\n                    refreshOn: serializedAT.refresh_on,\n                    keyId: serializedAT.key_id,\n                    tokenType: serializedAT.token_type,\n                };\n                const accessToken: AccessTokenEntity = new AccessTokenEntity();\n                CacheManager.toObject(accessToken, mappedAT);\n                atObjects[key] = accessToken;\n            });\n        }\n\n        return atObjects;\n    }\n\n    /**\n     * Deserializes refresh tokens to RefreshTokenEntity objects\n     * @param refreshTokens\n     */\n    static deserializeRefreshTokens(refreshTokens: Record<string, SerializedRefreshTokenEntity>): RefreshTokenCache {\n        const rtObjects: RefreshTokenCache = {};\n        if (refreshTokens) {\n            Object.keys(refreshTokens).map(function (key) {\n                const serializedRT = refreshTokens[key];\n                const mappedRT = {\n                    homeAccountId: serializedRT.home_account_id,\n                    environment: serializedRT.environment,\n                    credentialType: serializedRT.credential_type,\n                    clientId: serializedRT.client_id,\n                    secret: serializedRT.secret,\n                    familyId: serializedRT.family_id,\n                    target: serializedRT.target,\n                    realm: serializedRT.realm,\n                };\n                const refreshToken: RefreshTokenEntity = new RefreshTokenEntity();\n                CacheManager.toObject(refreshToken, mappedRT);\n                rtObjects[key] = refreshToken;\n            });\n        }\n\n        return rtObjects;\n    }\n\n    /**\n     * Deserializes appMetadata to AppMetaData objects\n     * @param appMetadata\n     */\n    static deserializeAppMetadata(appMetadata: Record<string, SerializedAppMetadataEntity>): AppMetadataCache {\n        const appMetadataObjects: AppMetadataCache = {};\n        if (appMetadata) {\n            Object.keys(appMetadata).map(function (key) {\n                const serializedAmdt = appMetadata[key];\n                const mappedAmd = {\n                    clientId: serializedAmdt.client_id,\n                    environment: serializedAmdt.environment,\n                    familyId: serializedAmdt.family_id,\n                };\n                const amd: AppMetadataEntity = new AppMetadataEntity();\n                CacheManager.toObject(amd, mappedAmd);\n                appMetadataObjects[key] = amd;\n            });\n        }\n\n        return appMetadataObjects;\n    }\n\n    /**\n     * Deserialize an inMemory Cache\n     * @param jsonCache\n     */\n    static deserializeAllCache(jsonCache: JsonCache): InMemoryCache {\n        return {\n            accounts: jsonCache.Account\n                ? this.deserializeAccounts(jsonCache.Account)\n                : {},\n            idTokens: jsonCache.IdToken\n                ? this.deserializeIdTokens(jsonCache.IdToken)\n                : {},\n            accessTokens: jsonCache.AccessToken\n                ? this.deserializeAccessTokens(jsonCache.AccessToken)\n                : {},\n            refreshTokens: jsonCache.RefreshToken\n                ? this.deserializeRefreshTokens(jsonCache.RefreshToken)\n                : {},\n            appMetadata: jsonCache.AppMetadata\n                ? this.deserializeAppMetadata(jsonCache.AppMetadata)\n                : {},\n        };\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AccountCache, IdTokenCache, AccessTokenCache, RefreshTokenCache, AppMetadataCache } from \"@azure/msal-common\";\nimport { InMemoryCache, JsonCache, SerializedAccountEntity, SerializedIdTokenEntity, SerializedAccessTokenEntity, SerializedRefreshTokenEntity, SerializedAppMetadataEntity } from \"./SerializerTypes\";\n\nexport class Serializer {\n    /**\n     * serialize the JSON blob\n     * @param data\n     */\n    static serializeJSONBlob(data: JsonCache): string {\n        return JSON.stringify(data);\n    }\n\n    /**\n     * Serialize Accounts\n     * @param accCache\n     */\n    static serializeAccounts(accCache: AccountCache): Record<string, SerializedAccountEntity> {\n        const accounts: Record<string, SerializedAccountEntity> = {};\n        Object.keys(accCache).map(function (key) {\n            const accountEntity = accCache[key];\n            accounts[key] = {\n                home_account_id: accountEntity.homeAccountId,\n                environment: accountEntity.environment,\n                realm: accountEntity.realm,\n                local_account_id: accountEntity.localAccountId,\n                username: accountEntity.username,\n                authority_type: accountEntity.authorityType,\n                name: accountEntity.name,\n                client_info: accountEntity.clientInfo,\n                last_modification_time: accountEntity.lastModificationTime,\n                last_modification_app: accountEntity.lastModificationApp,\n            };\n        });\n\n        return accounts;\n    }\n\n    /**\n     * Serialize IdTokens\n     * @param idTCache\n     */\n    static serializeIdTokens(idTCache: IdTokenCache): Record<string, SerializedIdTokenEntity> {\n        const idTokens: Record<string, SerializedIdTokenEntity> = {};\n        Object.keys(idTCache).map(function (key) {\n            const idTEntity = idTCache[key];\n            idTokens[key] = {\n                home_account_id: idTEntity.homeAccountId,\n                environment: idTEntity.environment,\n                credential_type: idTEntity.credentialType,\n                client_id: idTEntity.clientId,\n                secret: idTEntity.secret,\n                realm: idTEntity.realm,\n            };\n        });\n\n        return idTokens;\n    }\n\n    /**\n     * Serializes AccessTokens\n     * @param atCache\n     */\n    static serializeAccessTokens(atCache: AccessTokenCache): Record<string, SerializedAccessTokenEntity> {\n        const accessTokens: Record<string, SerializedAccessTokenEntity> = {};\n        Object.keys(atCache).map(function (key) {\n            const atEntity = atCache[key];\n            accessTokens[key] = {\n                home_account_id: atEntity.homeAccountId,\n                environment: atEntity.environment,\n                credential_type: atEntity.credentialType,\n                client_id: atEntity.clientId,\n                secret: atEntity.secret,\n                realm: atEntity.realm,\n                target: atEntity.target,\n                cached_at: atEntity.cachedAt,\n                expires_on: atEntity.expiresOn,\n                extended_expires_on: atEntity.extendedExpiresOn,\n                refresh_on: atEntity.refreshOn,\n                key_id: atEntity.keyId,\n                token_type: atEntity.tokenType,\n            };\n        });\n\n        return accessTokens;\n    }\n\n    /**\n     * Serialize refreshTokens\n     * @param rtCache\n     */\n    static serializeRefreshTokens(rtCache: RefreshTokenCache): Record<string, SerializedRefreshTokenEntity> {\n        const refreshTokens: Record<string, SerializedRefreshTokenEntity> = {};\n        Object.keys(rtCache).map(function (key) {\n            const rtEntity = rtCache[key];\n            refreshTokens[key] = {\n                home_account_id: rtEntity.homeAccountId,\n                environment: rtEntity.environment,\n                credential_type: rtEntity.credentialType,\n                client_id: rtEntity.clientId,\n                secret: rtEntity.secret,\n                family_id: rtEntity.familyId,\n                target: rtEntity.target,\n                realm: rtEntity.realm\n            };\n        });\n\n        return refreshTokens;\n    }\n\n    /**\n     * Serialize amdtCache\n     * @param amdtCache\n     */\n    static serializeAppMetadata(amdtCache: AppMetadataCache): Record<string, SerializedAppMetadataEntity> {\n        const appMetadata: Record<string, SerializedAppMetadataEntity> = {};\n        Object.keys(amdtCache).map(function (key) {\n            const amdtEntity = amdtCache[key];\n            appMetadata[key] = {\n                client_id: amdtEntity.clientId,\n                environment: amdtEntity.environment,\n                family_id: amdtEntity.familyId,\n            };\n        });\n\n        return appMetadata;\n    }\n\n    /**\n     * Serialize the cache\n     * @param jsonContent\n     */\n    static serializeAllCache(inMemCache: InMemoryCache): JsonCache {\n        return {\n            Account: this.serializeAccounts(inMemCache.accounts),\n            IdToken: this.serializeIdTokens(inMemCache.idTokens),\n            AccessToken: this.serializeAccessTokens(inMemCache.accessTokens),\n            RefreshToken: this.serializeRefreshTokens(inMemCache.refreshTokens),\n            AppMetadata: this.serializeAppMetadata(inMemCache.appMetadata),\n        };\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    AccountEntity,\n    IdTokenEntity,\n    AccessTokenEntity,\n    RefreshTokenEntity,\n    AppMetadataEntity,\n    ServerTelemetryEntity,\n    ThrottlingEntity,\n    CacheManager,\n    Logger,\n    ValidCacheType,\n    ICrypto,\n    AuthorityMetadataEntity,\n    ValidCredentialType\n} from \"@azure/msal-common\";\nimport { Deserializer } from \"./serializer/Deserializer\";\nimport { Serializer } from \"./serializer/Serializer\";\nimport { InMemoryCache, JsonCache, CacheKVStore } from \"./serializer/SerializerTypes\";\n\n/**\n * This class implements Storage for node, reading cache from user specified storage location or an  extension library\n * @public\n */\nexport class NodeStorage extends CacheManager {\n    // Cache configuration, either set by user or default values.\n    private logger: Logger;\n    private cache: CacheKVStore = {};\n    private changeEmitters: Array<Function> = [];\n\n    constructor(logger: Logger, clientId: string, cryptoImpl: ICrypto) {\n        super(clientId, cryptoImpl);\n        this.logger = logger;\n    }\n\n    /**\n     * Queue up callbacks\n     * @param func - a callback function for cache change indication\n     */\n    registerChangeEmitter(func: () => void): void {\n        this.changeEmitters.push(func);\n    }\n\n    /**\n     * Invoke the callback when cache changes\n     */\n    emitChange(): void {\n        this.changeEmitters.forEach(func => func.call(null));\n    }\n\n    /**\n     * Converts cacheKVStore to InMemoryCache\n     * @param cache - key value store\n     */\n    cacheToInMemoryCache(cache: CacheKVStore): InMemoryCache {\n\n        const inMemoryCache: InMemoryCache = {\n            accounts: {},\n            idTokens: {},\n            accessTokens: {},\n            refreshTokens: {},\n            appMetadata: {},\n        };\n\n        for (const key in cache) {\n            if (cache[key as string] instanceof AccountEntity) {\n                inMemoryCache.accounts[key] = cache[key] as AccountEntity;\n            } else if (cache[key] instanceof IdTokenEntity) {\n                inMemoryCache.idTokens[key] = cache[key] as IdTokenEntity;\n            } else if (cache[key] instanceof AccessTokenEntity) {\n                inMemoryCache.accessTokens[key] = cache[key] as AccessTokenEntity;\n            } else if (cache[key] instanceof RefreshTokenEntity) {\n                inMemoryCache.refreshTokens[key] = cache[key] as RefreshTokenEntity;\n            } else if (cache[key] instanceof AppMetadataEntity) {\n                inMemoryCache.appMetadata[key] = cache[key] as AppMetadataEntity;\n            } else {\n                continue;\n            }\n        }\n\n        return inMemoryCache;\n    }\n\n    /**\n     * converts inMemoryCache to CacheKVStore\n     * @param inMemoryCache - kvstore map for inmemory\n     */\n    inMemoryCacheToCache(inMemoryCache: InMemoryCache): CacheKVStore {\n        // convert in memory cache to a flat Key-Value map\n        let cache = this.getCache();\n\n        cache = {\n            ...inMemoryCache.accounts,\n            ...inMemoryCache.idTokens,\n            ...inMemoryCache.accessTokens,\n            ...inMemoryCache.refreshTokens,\n            ...inMemoryCache.appMetadata\n        };\n        return cache;\n    }\n\n    /**\n     * gets the current in memory cache for the client\n     */\n    getInMemoryCache(): InMemoryCache {\n        this.logger.trace(\"Getting in-memory cache\");\n\n        // convert the cache key value store to inMemoryCache\n        const inMemoryCache = this.cacheToInMemoryCache(this.getCache());\n        return inMemoryCache;\n    }\n\n    /**\n     * sets the current in memory cache for the client\n     * @param inMemoryCache - key value map in memory\n     */\n    setInMemoryCache(inMemoryCache: InMemoryCache): void{\n        this.logger.trace(\"Setting in-memory cache\");\n\n        // convert and append the inMemoryCache to cacheKVStore\n        const cache = this.inMemoryCacheToCache(inMemoryCache);\n        this.setCache(cache);\n\n        this.emitChange();\n    }\n\n    /**\n     * get the current cache key-value store\n     */\n    getCache(): CacheKVStore {\n        this.logger.trace(\"Getting cache key-value store\");\n        return this.cache;\n    }\n\n    /**\n     * sets the current cache (key value store)\n     * @param cacheMap - key value map\n     */\n    setCache(cache: CacheKVStore): void {\n        this.logger.trace(\"Setting cache key value store\");\n        this.cache = cache;\n\n        // mark change in cache\n        this.emitChange();\n    }\n\n    /**\n     * Gets cache item with given key.\n     * @param key - lookup key for the cache entry\n     */\n    getItem(key: string): ValidCacheType {\n        this.logger.tracePii(`Item key: ${key}`);\n\n        // read cache\n        const cache = this.getCache();\n        return cache[key];\n    }\n\n    /**\n     * Gets cache item with given key-value\n     * @param key - lookup key for the cache entry\n     * @param value - value of the cache entry\n     */\n    setItem(key: string, value: ValidCacheType): void {\n        this.logger.tracePii(`Item key: ${key}`);\n\n        // read cache\n        const cache = this.getCache();\n        cache[key] = value;\n\n        // write to cache\n        this.setCache(cache);\n    }\n\n    /**\n     * fetch the account entity\n     * @param accountKey - lookup key to fetch cache type AccountEntity\n     */\n    getAccount(accountKey: string): AccountEntity | null {\n        const account = this.getItem(accountKey) as AccountEntity;\n        if (AccountEntity.isAccountEntity(account)) {\n            return account;\n        }\n        return null;\n    }\n\n    /**\n     * set account entity\n     * @param account - cache value to be set of type AccountEntity\n     */\n    setAccount(account: AccountEntity): void {\n        const accountKey = account.generateAccountKey();\n        this.setItem(accountKey, account);\n    }\n\n    /**\n     * fetch the idToken credential\n     * @param idTokenKey - lookup key to fetch cache type IdTokenEntity\n     */\n    getIdTokenCredential(idTokenKey: string): IdTokenEntity | null {\n        const idToken = this.getItem(idTokenKey) as IdTokenEntity;\n        if (IdTokenEntity.isIdTokenEntity(idToken)) {\n            return idToken;\n        }\n        return null;\n    }\n\n    /**\n     * set idToken credential\n     * @param idToken - cache value to be set of type IdTokenEntity\n     */\n    setIdTokenCredential(idToken: IdTokenEntity): void {\n        const idTokenKey = idToken.generateCredentialKey();\n        this.setItem(idTokenKey, idToken);\n    }\n\n    /**\n     * fetch the accessToken credential\n     * @param accessTokenKey - lookup key to fetch cache type AccessTokenEntity\n     */\n    getAccessTokenCredential(accessTokenKey: string): AccessTokenEntity | null {\n        const accessToken = this.getItem(accessTokenKey) as AccessTokenEntity;\n        if (AccessTokenEntity.isAccessTokenEntity(accessToken)) {\n            return accessToken;\n        }\n        return null;\n    }\n\n    /**\n     * set accessToken credential\n     * @param accessToken -  cache value to be set of type AccessTokenEntity\n     */\n    setAccessTokenCredential(accessToken: AccessTokenEntity): void {\n        const accessTokenKey = accessToken.generateCredentialKey();\n        this.setItem(accessTokenKey, accessToken);\n    }\n\n    /**\n     * fetch the refreshToken credential\n     * @param refreshTokenKey - lookup key to fetch cache type RefreshTokenEntity\n     */\n    getRefreshTokenCredential(refreshTokenKey: string): RefreshTokenEntity | null {\n        const refreshToken = this.getItem(refreshTokenKey) as RefreshTokenEntity;\n        if (RefreshTokenEntity.isRefreshTokenEntity(refreshToken)) {\n            return refreshToken as RefreshTokenEntity;\n        }\n        return null;\n    }\n\n    /**\n     * set refreshToken credential\n     * @param refreshToken - cache value to be set of type RefreshTokenEntity\n     */\n    setRefreshTokenCredential(refreshToken: RefreshTokenEntity): void {\n        const refreshTokenKey = refreshToken.generateCredentialKey();\n        this.setItem(refreshTokenKey, refreshToken);\n    }\n\n    /**\n     * fetch appMetadata entity from the platform cache\n     * @param appMetadataKey - lookup key to fetch cache type AppMetadataEntity\n     */\n    getAppMetadata(appMetadataKey: string): AppMetadataEntity | null {\n        const appMetadata: AppMetadataEntity = this.getItem(appMetadataKey) as AppMetadataEntity;\n        if (AppMetadataEntity.isAppMetadataEntity(appMetadataKey, appMetadata)) {\n            return appMetadata;\n        }\n        return null;\n    }\n\n    /**\n     * set appMetadata entity to the platform cache\n     * @param appMetadata - cache value to be set of type AppMetadataEntity\n     */\n    setAppMetadata(appMetadata: AppMetadataEntity): void {\n        const appMetadataKey = appMetadata.generateAppMetadataKey();\n        this.setItem(appMetadataKey, appMetadata);\n    }\n\n    /**\n     * fetch server telemetry entity from the platform cache\n     * @param serverTelemetrykey - lookup key to fetch cache type ServerTelemetryEntity\n     */\n    getServerTelemetry(serverTelemetrykey: string): ServerTelemetryEntity | null {\n        const serverTelemetryEntity: ServerTelemetryEntity = this.getItem(serverTelemetrykey) as ServerTelemetryEntity;\n        if (serverTelemetryEntity && ServerTelemetryEntity.isServerTelemetryEntity(serverTelemetrykey, serverTelemetryEntity)) {\n            return serverTelemetryEntity;\n        }\n        return null;\n    }\n\n    /**\n     * set server telemetry entity to the platform cache\n     * @param serverTelemetryKey - lookup key to fetch cache type ServerTelemetryEntity\n     * @param serverTelemetry - cache value to be set of type ServerTelemetryEntity\n     */\n    setServerTelemetry(serverTelemetryKey: string, serverTelemetry: ServerTelemetryEntity): void {\n        this.setItem(serverTelemetryKey, serverTelemetry);\n    }\n\n    /**\n     * fetch authority metadata entity from the platform cache\n     * @param key - lookup key to fetch cache type AuthorityMetadataEntity\n     */\n    getAuthorityMetadata(key: string): AuthorityMetadataEntity | null {\n        const authorityMetadataEntity: AuthorityMetadataEntity = this.getItem(key) as AuthorityMetadataEntity;\n        if (authorityMetadataEntity && AuthorityMetadataEntity.isAuthorityMetadataEntity(key, authorityMetadataEntity)) {\n            return authorityMetadataEntity;\n        }\n        return null;\n    }\n\n    /**\n     * Get all authority metadata keys\n     */\n    getAuthorityMetadataKeys(): Array<string> {\n        return this.getKeys().filter((key) => {\n            return this.isAuthorityMetadata(key);\n        });\n    }\n\n    /**\n     * set authority metadata entity to the platform cache\n     * @param key - lookup key to fetch cache type AuthorityMetadataEntity\n     * @param metadata - cache value to be set of type AuthorityMetadataEntity\n     */\n    setAuthorityMetadata(key: string, metadata: AuthorityMetadataEntity): void {\n        this.setItem(key, metadata);\n    }\n\n    /**\n     * fetch throttling entity from the platform cache\n     * @param throttlingCacheKey - lookup key to fetch cache type ThrottlingEntity\n     */\n    getThrottlingCache(throttlingCacheKey: string): ThrottlingEntity | null {\n        const throttlingCache: ThrottlingEntity = this.getItem(throttlingCacheKey) as ThrottlingEntity;\n        if (throttlingCache && ThrottlingEntity.isThrottlingEntity(throttlingCacheKey, throttlingCache)) {\n            return throttlingCache;\n        }\n        return null;\n    }\n\n    /**\n     * set throttling entity to the platform cache\n     * @param throttlingCacheKey - lookup key to fetch cache type ThrottlingEntity\n     * @param throttlingCache - cache value to be set of type ThrottlingEntity\n     */\n    setThrottlingCache(throttlingCacheKey: string, throttlingCache: ThrottlingEntity): void {\n        this.setItem(throttlingCacheKey, throttlingCache);\n    }\n\n    /**\n     * Removes the cache item from memory with the given key.\n     * @param key - lookup key to remove a cache entity\n     * @param inMemory - key value map of the cache\n     */\n    removeItem(key: string): boolean {\n        this.logger.tracePii(`Item key: ${key}`);\n\n        // read inMemoryCache\n        let result: boolean = false;\n        const cache = this.getCache();\n\n        if (!!cache[key]) {\n            delete cache[key];\n            result = true;\n        }\n\n        // write to the cache after removal\n        if (result) {\n            this.setCache(cache);\n            this.emitChange();\n        }\n        return result;\n    }\n\n    /**\n     * Checks whether key is in cache.\n     * @param key - look up key for a cache entity\n     */\n    containsKey(key: string): boolean {\n        return this.getKeys().includes(key);\n    }\n\n    /**\n     * Gets all keys in window.\n     */\n    getKeys(): string[] {\n        this.logger.trace(\"Retrieving all cache keys\");\n\n        // read cache\n        const cache = this.getCache();\n        return [ ...Object.keys(cache)];\n    }\n\n    /**\n     * Clears all cache entries created by MSAL (except tokens).\n     */\n    async clear(): Promise<void> {\n        this.logger.trace(\"Clearing cache entries created by MSAL\");\n\n        // read inMemoryCache\n        const cacheKeys = this.getKeys();\n\n        // delete each element\n        cacheKeys.forEach(key => {\n            this.removeItem(key);\n        });\n        this.emitChange();\n    }\n\n    /**\n     * Initialize in memory cache from an exisiting cache vault\n     * @param cache - blob formatted cache (JSON)\n     */\n    static generateInMemoryCache(cache: string): InMemoryCache {\n        return Deserializer.deserializeAllCache(\n            Deserializer.deserializeJSONBlob(cache)\n        );\n    }\n\n    /**\n     * retrieves the final JSON\n     * @param inMemoryCache - itemised cache read from the JSON\n     */\n    static generateJsonCache(inMemoryCache: InMemoryCache): JsonCache {\n        return Serializer.serializeAllCache(inMemoryCache);\n    }\n\n    /**\n     * Updates a credential's cache key if the current cache key is outdated\n     */\n    updateCredentialCacheKey(currentCacheKey: string, credential: ValidCredentialType): string {\n        const updatedCacheKey = credential.generateCredentialKey();\n\n        if (currentCacheKey !== updatedCacheKey) {\n            const cacheItem = this.getItem(currentCacheKey);\n            if (cacheItem) {\n                this.removeItem(currentCacheKey);\n                this.setItem(updatedCacheKey, cacheItem);\n                this.logger.verbose(`Updated an outdated ${credential.credentialType} cache key`);\n                return updatedCacheKey;\n            } else {\n                this.logger.error(`Attempted to update an outdated ${credential.credentialType} cache key but no item matching the outdated key was found in storage`);\n            }\n        }\n\n        return currentCacheKey;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { NodeStorage } from \"./NodeStorage\";\nimport { StringUtils, AccountEntity, AccountInfo, Logger, ISerializableTokenCache, ICachePlugin, TokenCacheContext } from \"@azure/msal-common\";\nimport { InMemoryCache, JsonCache, SerializedAccountEntity, SerializedAccessTokenEntity, SerializedRefreshTokenEntity, SerializedIdTokenEntity, SerializedAppMetadataEntity, CacheKVStore } from \"./serializer/SerializerTypes\";\nimport { Deserializer } from \"./serializer/Deserializer\";\nimport { Serializer } from \"./serializer/Serializer\";\nimport { ITokenCache } from \"./ITokenCache\";\n\nconst defaultSerializedCache: JsonCache = {\n    Account: {},\n    IdToken: {},\n    AccessToken: {},\n    RefreshToken: {},\n    AppMetadata: {},\n};\n\n/**\n * In-memory token cache manager\n * @public\n */\nexport class TokenCache implements ISerializableTokenCache, ITokenCache {\n\n    private storage: NodeStorage;\n    private cacheHasChanged: boolean;\n    private cacheSnapshot: string;\n    private readonly persistence: ICachePlugin;\n    private logger: Logger;\n\n    constructor(storage: NodeStorage, logger: Logger, cachePlugin?: ICachePlugin) {\n        this.cacheHasChanged = false;\n        this.storage = storage;\n        this.storage.registerChangeEmitter(this.handleChangeEvent.bind(this));\n        if (cachePlugin) {\n            this.persistence = cachePlugin;\n        }\n        this.logger = logger;\n    }\n\n    /**\n     * Set to true if cache state has changed since last time serialize or writeToPersistence was called\n     */\n    hasChanged(): boolean {\n        return this.cacheHasChanged;\n    }\n\n    /**\n     * Serializes in memory cache to JSON\n     */\n    serialize(): string {\n        this.logger.trace(\"Serializing in-memory cache\");\n        let finalState = Serializer.serializeAllCache(\n            this.storage.getInMemoryCache() as InMemoryCache\n        );\n\n        // if cacheSnapshot not null or empty, merge\n        if (!StringUtils.isEmpty(this.cacheSnapshot)) {\n            this.logger.trace(\"Reading cache snapshot from disk\");\n            finalState = this.mergeState(\n                JSON.parse(this.cacheSnapshot),\n                finalState\n            );\n        } else {\n            this.logger.trace(\"No cache snapshot to merge\");\n        }\n        this.cacheHasChanged = false;\n\n        return JSON.stringify(finalState);\n    }\n\n    /**\n     * Deserializes JSON to in-memory cache. JSON should be in MSAL cache schema format\n     * @param cache - blob formatted cache\n     */\n    deserialize(cache: string): void {\n        this.logger.trace(\"Deserializing JSON to in-memory cache\");\n        this.cacheSnapshot = cache;\n\n        if (!StringUtils.isEmpty(this.cacheSnapshot)) {\n            this.logger.trace(\"Reading cache snapshot from disk\");\n            const deserializedCache = Deserializer.deserializeAllCache(\n                this.overlayDefaults(JSON.parse(this.cacheSnapshot))\n            );\n            this.storage.setInMemoryCache(deserializedCache);\n        } else {\n            this.logger.trace(\"No cache snapshot to deserialize\");\n        }\n    }\n\n    /**\n     * Fetches the cache key-value map\n     */\n    getKVStore(): CacheKVStore {\n        return this.storage.getCache();\n    }\n\n    /**\n     * API that retrieves all accounts currently in cache to the user\n     */\n    async getAllAccounts(): Promise<AccountInfo[]> {\n\n        this.logger.trace(\"getAllAccounts called\");\n        let cacheContext;\n        try {\n            if (this.persistence) {\n                cacheContext = new TokenCacheContext(this, false);\n                await this.persistence.beforeCacheAccess(cacheContext);\n            }\n            return this.storage.getAllAccounts();\n        } finally {\n            if (this.persistence && cacheContext) {\n                await this.persistence.afterCacheAccess(cacheContext);\n            }\n        }\n    }\n\n    /**\n     * Returns the signed in account matching homeAccountId.\n     * (the account object is created at the time of successful login)\n     * or null when no matching account is found\n     * @param homeAccountId - unique identifier for an account (uid.utid)\n     */\n    async getAccountByHomeId(homeAccountId: string): Promise<AccountInfo | null> {\n        const allAccounts = await this.getAllAccounts();\n        if (!StringUtils.isEmpty(homeAccountId) && allAccounts && allAccounts.length) {\n            return allAccounts.filter(accountObj => accountObj.homeAccountId === homeAccountId)[0] || null;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the signed in account matching localAccountId.\n     * (the account object is created at the time of successful login)\n     * or null when no matching account is found\n     * @param localAccountId - unique identifier of an account (sub/obj when homeAccountId cannot be populated)\n     */\n    async getAccountByLocalId(localAccountId: string): Promise<AccountInfo | null> {\n        const allAccounts = await this.getAllAccounts();\n        if (!StringUtils.isEmpty(localAccountId) && allAccounts && allAccounts.length) {\n            return allAccounts.filter(accountObj => accountObj.localAccountId === localAccountId)[0] || null;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * API to remove a specific account and the relevant data from cache\n     * @param account - AccountInfo passed by the user\n     */\n    async removeAccount(account: AccountInfo): Promise<void> {\n        this.logger.trace(\"removeAccount called\");\n        let cacheContext;\n        try {\n            if (this.persistence) {\n                cacheContext = new TokenCacheContext(this, true);\n                await this.persistence.beforeCacheAccess(cacheContext);\n            }\n            await this.storage.removeAccount(AccountEntity.generateAccountCacheKey(account));\n        } finally {\n            if (this.persistence && cacheContext) {\n                await this.persistence.afterCacheAccess(cacheContext);\n            }\n        }\n    }\n\n    /**\n     * Called when the cache has changed state.\n     */\n    private handleChangeEvent() {\n        this.cacheHasChanged = true;\n    }\n\n    /**\n     * Merge in memory cache with the cache snapshot.\n     * @param oldState - cache before changes\n     * @param currentState - current cache state in the library\n     */\n    private mergeState(oldState: JsonCache, currentState: JsonCache): JsonCache {\n        this.logger.trace(\"Merging in-memory cache with cache snapshot\");\n        const stateAfterRemoval = this.mergeRemovals(oldState, currentState);\n        return this.mergeUpdates(stateAfterRemoval, currentState);\n    }\n\n    /**\n     * Deep update of oldState based on newState values\n     * @param oldState - cache before changes\n     * @param newState - updated cache\n     */\n    private mergeUpdates(oldState: object, newState: object): JsonCache {\n        Object.keys(newState).forEach((newKey: string) => {\n            const newValue = newState[newKey];\n\n            // if oldState does not contain value but newValue does, add it\n            if (!oldState.hasOwnProperty(newKey)) {\n                if (newValue !== null) {\n                    oldState[newKey] = newValue;\n                }\n            } else {\n                // both oldState and newState contain the key, do deep update\n                const newValueNotNull = newValue !== null;\n                const newValueIsObject = typeof newValue === \"object\";\n                const newValueIsNotArray = !Array.isArray(newValue);\n                const oldStateNotUndefinedOrNull = typeof oldState[newKey] !== \"undefined\" && oldState[newKey] !== null;\n\n                if (newValueNotNull && newValueIsObject && newValueIsNotArray && oldStateNotUndefinedOrNull) {\n                    this.mergeUpdates(oldState[newKey], newValue);\n                } else {\n                    oldState[newKey] = newValue;\n                }\n            }\n        });\n\n        return oldState as JsonCache;\n    }\n\n    /**\n     * Removes entities in oldState that the were removed from newState. If there are any unknown values in root of\n     * oldState that are not recognized, they are left untouched.\n     * @param oldState - cache before changes\n     * @param newState - updated cache\n     */\n    private mergeRemovals(oldState: JsonCache, newState: JsonCache): JsonCache {\n        this.logger.trace(\"Remove updated entries in cache\");\n        const accounts = oldState.Account ? this.mergeRemovalsDict<SerializedAccountEntity>(oldState.Account, newState.Account) : oldState.Account;\n        const accessTokens = oldState.AccessToken ? this.mergeRemovalsDict<SerializedAccessTokenEntity>(oldState.AccessToken, newState.AccessToken) : oldState.AccessToken;\n        const refreshTokens = oldState.RefreshToken ? this.mergeRemovalsDict<SerializedRefreshTokenEntity>(oldState.RefreshToken, newState.RefreshToken) : oldState.RefreshToken;\n        const idTokens = oldState.IdToken ? this.mergeRemovalsDict<SerializedIdTokenEntity>(oldState.IdToken, newState.IdToken) : oldState.IdToken;\n        const appMetadata = oldState.AppMetadata ? this.mergeRemovalsDict<SerializedAppMetadataEntity>(oldState.AppMetadata, newState.AppMetadata) : oldState.AppMetadata;\n\n        return {\n            ...oldState,\n            Account: accounts,\n            AccessToken: accessTokens,\n            RefreshToken: refreshTokens,\n            IdToken: idTokens,\n            AppMetadata: appMetadata\n        };\n    }\n\n    /**\n     * Helper to merge new cache with the old one\n     * @param oldState - cache before changes\n     * @param newState - updated cache\n     */\n    private mergeRemovalsDict<T>(oldState: Record<string, T>, newState?: Record<string, T>): Record<string, T> {\n        const finalState = { ...oldState };\n        Object.keys(oldState).forEach((oldKey) => {\n            if (!newState || !(newState.hasOwnProperty(oldKey))) {\n                delete finalState[oldKey];\n            }\n        });\n        return finalState;\n    }\n\n    /**\n     * Helper to overlay as a part of cache merge\n     * @param passedInCache - cache read from the blob\n     */\n    private overlayDefaults(passedInCache: JsonCache): JsonCache {\n        this.logger.trace(\"Overlaying input cache with the default cache\");\n        return {\n            Account: {\n                ...defaultSerializedCache.Account,\n                ...passedInCache.Account,\n            },\n            IdToken: {\n                ...defaultSerializedCache.IdToken,\n                ...passedInCache.IdToken,\n            },\n            AccessToken: {\n                ...defaultSerializedCache.AccessToken,\n                ...passedInCache.AccessToken,\n            },\n            RefreshToken: {\n                ...defaultSerializedCache.RefreshToken,\n                ...passedInCache.RefreshToken,\n            },\n            AppMetadata: {\n                ...defaultSerializedCache.AppMetadata,\n                ...passedInCache.AppMetadata,\n            },\n        };\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    AuthorizationCodeClient,\n    ClientConfiguration,\n    RefreshTokenClient,\n    AuthenticationResult,\n    Authority,\n    AuthorityFactory,\n    BaseAuthRequest,\n    SilentFlowClient,\n    Logger,\n    ServerTelemetryManager,\n    ServerTelemetryRequest,\n    CommonSilentFlowRequest,\n    CommonRefreshTokenRequest,\n    CommonAuthorizationCodeRequest,\n    CommonAuthorizationUrlRequest,\n    CommonUsernamePasswordRequest,\n    UsernamePasswordClient,\n    AuthenticationScheme,\n    ResponseMode,\n    AuthorityOptions,\n    OIDC_DEFAULT_SCOPES,\n    AzureRegionConfiguration,\n    AuthError,\n    AzureCloudOptions,\n} from \"@azure/msal-common\";\nimport { Configuration, buildAppConfiguration, NodeConfiguration } from \"../config/Configuration\";\nimport { CryptoProvider } from \"../crypto/CryptoProvider\";\nimport { NodeStorage } from \"../cache/NodeStorage\";\nimport { Constants as NodeConstants, ApiId } from \"../utils/Constants\";\nimport { TokenCache } from \"../cache/TokenCache\";\nimport { ClientAssertion } from \"./ClientAssertion\";\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\nimport { RefreshTokenRequest } from \"../request/RefreshTokenRequest\";\nimport { SilentFlowRequest } from \"../request/SilentFlowRequest\";\nimport { version, name } from \"../packageMetadata\";\nimport { UsernamePasswordRequest } from \"../request/UsernamePasswordRequest\";\n\n/**\n * Base abstract class for all ClientApplications - public and confidential\n * @public\n */\nexport abstract class ClientApplication {\n\n    private readonly cryptoProvider: CryptoProvider;\n    private tokenCache: TokenCache;\n\n    /**\n     * Platform storage object\n     */\n    protected storage: NodeStorage;\n    /**\n     * Logger object to log the application flow\n     */\n    protected logger: Logger;\n    /**\n     * Platform configuration initialized by the application\n     */\n    protected config: NodeConfiguration;\n    /**\n     * Client assertion passed by the user for confidential client flows\n     */\n    protected clientAssertion: ClientAssertion;\n    /**\n     * Client secret passed by the user for confidential client flows\n     */\n    protected clientSecret: string;\n\n    /**\n     * Constructor for the ClientApplication\n     */\n    protected constructor(configuration: Configuration) {\n        this.config = buildAppConfiguration(configuration);\n        this.cryptoProvider = new CryptoProvider();\n        this.logger = new Logger(this.config.system.loggerOptions, name, version);\n        this.storage = new NodeStorage(this.logger, this.config.auth.clientId, this.cryptoProvider);\n        this.tokenCache = new TokenCache(\n            this.storage,\n            this.logger,\n            this.config.cache.cachePlugin\n        );\n    }\n\n    /**\n     * Creates the URL of the authorization request, letting the user input credentials and consent to the\n     * application. The URL targets the /authorize endpoint of the authority configured in the\n     * application object.\n     *\n     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\n     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\n     * `acquireTokenByCode(AuthorizationCodeRequest)`.\n     */\n    async getAuthCodeUrl(request: AuthorizationUrlRequest): Promise<string> {\n        this.logger.info(\"getAuthCodeUrl called\", request.correlationId);\n        const validRequest: CommonAuthorizationUrlRequest = {\n            ...request,\n            ...this.initializeBaseRequest(request),\n            responseMode: request.responseMode || ResponseMode.QUERY,\n            authenticationScheme: AuthenticationScheme.BEARER\n        };\n\n        const authClientConfig = await this.buildOauthClientConfiguration(\n            validRequest.authority,\n            validRequest.correlationId,\n            undefined,\n            undefined,\n            request.azureCloudOptions\n        );\n        const authorizationCodeClient = new AuthorizationCodeClient(\n            authClientConfig\n        );\n        this.logger.verbose(\"Auth code client created\", validRequest.correlationId);\n        return authorizationCodeClient.getAuthCodeUrl(validRequest);\n    }\n\n    /**\n     * Acquires a token by exchanging the Authorization Code received from the first step of OAuth2.0\n     * Authorization Code flow.\n     *\n     * `getAuthCodeUrl(AuthorizationCodeUrlRequest)` can be used to create the URL for the first step of OAuth2.0\n     * Authorization Code flow. Ensure that values for redirectUri and scopes in AuthorizationCodeUrlRequest and\n     * AuthorizationCodeRequest are the same.\n     */\n    async acquireTokenByCode(request: AuthorizationCodeRequest): Promise<AuthenticationResult | null> {\n        this.logger.info(\"acquireTokenByCode called\", request.correlationId);\n        const validRequest: CommonAuthorizationCodeRequest = {\n            ...request,\n            ...this.initializeBaseRequest(request),\n            authenticationScheme: AuthenticationScheme.BEARER\n        };\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenByCode, validRequest.correlationId);\n        try {\n            const authClientConfig = await this.buildOauthClientConfiguration(\n                validRequest.authority,\n                validRequest.correlationId,\n                serverTelemetryManager,\n                undefined,\n                request.azureCloudOptions\n            );\n            const authorizationCodeClient = new AuthorizationCodeClient(\n                authClientConfig\n            );\n            this.logger.verbose(\"Auth code client created\", validRequest.correlationId);\n            return authorizationCodeClient.acquireToken(validRequest);\n        } catch (e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(validRequest.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }\n    }\n\n    /**\n     * Acquires a token by exchanging the refresh token provided for a new set of tokens.\n     *\n     * This API is provided only for scenarios where you would like to migrate from ADAL to MSAL. Otherwise, it is\n     * recommended that you use `acquireTokenSilent()` for silent scenarios. When using `acquireTokenSilent()`, MSAL will\n     * handle the caching and refreshing of tokens automatically.\n     */\n    async acquireTokenByRefreshToken(request: RefreshTokenRequest): Promise<AuthenticationResult | null> {\n        this.logger.info(\"acquireTokenByRefreshToken called\", request.correlationId);\n        const validRequest: CommonRefreshTokenRequest = {\n            ...request,\n            ...this.initializeBaseRequest(request),\n            authenticationScheme: AuthenticationScheme.BEARER\n        };\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenByRefreshToken, validRequest.correlationId);\n        try {\n            const refreshTokenClientConfig = await this.buildOauthClientConfiguration(\n                validRequest.authority,\n                validRequest.correlationId,\n                serverTelemetryManager,\n                undefined,\n                request.azureCloudOptions\n            );\n            const refreshTokenClient = new RefreshTokenClient(\n                refreshTokenClientConfig\n            );\n            this.logger.verbose(\"Refresh token client created\", validRequest.correlationId);\n            return refreshTokenClient.acquireToken(validRequest);\n        } catch (e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(validRequest.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }\n    }\n\n    /**\n     * Acquires a token silently when a user specifies the account the token is requested for.\n     *\n     * This API expects the user to provide an account object and looks into the cache to retrieve the token if present.\n     * There is also an optional \"forceRefresh\" boolean the user can send to bypass the cache for access_token and id_token.\n     * In case the refresh_token is expired or not found, an error is thrown\n     * and the guidance is for the user to call any interactive token acquisition API (eg: `acquireTokenByCode()`).\n     */\n    async acquireTokenSilent(request: SilentFlowRequest): Promise<AuthenticationResult | null> {\n        const validRequest: CommonSilentFlowRequest = {\n            ...request,\n            ...this.initializeBaseRequest(request),\n            forceRefresh: request.forceRefresh || false\n        };\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent, validRequest.correlationId, validRequest.forceRefresh);\n        try {\n            const silentFlowClientConfig = await this.buildOauthClientConfiguration(\n                validRequest.authority,\n                validRequest.correlationId,\n                serverTelemetryManager,\n                undefined,\n                request.azureCloudOptions\n            );\n            const silentFlowClient = new SilentFlowClient(\n                silentFlowClientConfig\n            );\n            this.logger.verbose(\"Silent flow client created\", validRequest.correlationId);\n            return silentFlowClient.acquireToken(validRequest);\n        } catch (e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(validRequest.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }\n    }\n\n    /**\n     * Acquires tokens with password grant by exchanging client applications username and password for credentials\n     *\n     * The latest OAuth 2.0 Security Best Current Practice disallows the password grant entirely.\n     * More details on this recommendation at https://tools.ietf.org/html/draft-ietf-oauth-security-topics-13#section-3.4\n     * Microsoft's documentation and recommendations are at:\n     * https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-authentication-flows#usernamepassword\n     *\n     * @param request - UsenamePasswordRequest\n     */\n    async acquireTokenByUsernamePassword(request: UsernamePasswordRequest): Promise<AuthenticationResult | null> {\n        this.logger.info(\"acquireTokenByUsernamePassword called\", request.correlationId);\n        const validRequest: CommonUsernamePasswordRequest = {\n            ...request,\n            ...this.initializeBaseRequest(request)\n        };\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenByUsernamePassword, validRequest.correlationId);\n        try {\n            const usernamePasswordClientConfig = await this.buildOauthClientConfiguration(\n                validRequest.authority,\n                validRequest.correlationId,\n                serverTelemetryManager,\n                undefined,\n                request.azureCloudOptions\n            );\n            const usernamePasswordClient = new UsernamePasswordClient(usernamePasswordClientConfig);\n            this.logger.verbose(\"Username password client created\", validRequest.correlationId);\n            return usernamePasswordClient.acquireToken(validRequest);\n        } catch (e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(validRequest.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }\n    }\n\n    /**\n     * Gets the token cache for the application.\n     */\n    getTokenCache(): TokenCache {\n        this.logger.info(\"getTokenCache called\");\n        return this.tokenCache;\n    }\n\n    /**\n     * Returns the logger instance\n     */\n    getLogger(): Logger {\n        return this.logger;\n    }\n\n    /**\n     * Replaces the default logger set in configurations with new Logger with new configurations\n     * @param logger - Logger instance\n     */\n    setLogger(logger: Logger): void {\n        this.logger = logger;\n    }\n\n    /**\n     * Builds the common configuration to be passed to the common component based on the platform configurarion\n     * @param authority - user passed authority in configuration\n     * @param serverTelemetryManager - initializes servertelemetry if passed\n     */\n    protected async buildOauthClientConfiguration(authority: string, requestCorrelationId?: string, serverTelemetryManager?: ServerTelemetryManager, azureRegionConfiguration?: AzureRegionConfiguration, azureCloudOptions?: AzureCloudOptions): Promise<ClientConfiguration> {\n\n        this.logger.verbose(\"buildOauthClientConfiguration called\", requestCorrelationId);\n\n        // precedence - azureCloudInstance + tenant >> authority and request  >> config\n        const userAzureCloudOptions = azureCloudOptions ? azureCloudOptions : this.config.auth.azureCloudOptions;\n\n        // using null assertion operator as we ensure that all config values have default values in buildConfiguration()\n        this.logger.verbose(`building oauth client configuration with the authority: ${authority}`, requestCorrelationId);\n        const discoveredAuthority = await this.createAuthority(authority, azureRegionConfiguration, requestCorrelationId, userAzureCloudOptions);\n\n        serverTelemetryManager?.updateRegionDiscoveryMetadata(discoveredAuthority.regionDiscoveryMetadata);\n\n        return {\n            authOptions: {\n                clientId: this.config.auth.clientId,\n                authority: discoveredAuthority,\n                clientCapabilities: this.config.auth.clientCapabilities\n            },\n            systemOptions: {\n                proxyUrl: this.config.system.proxyUrl,\n            },\n            loggerOptions: {\n                logLevel: this.config.system.loggerOptions.logLevel,\n                loggerCallback: this.config.system.loggerOptions\n                    .loggerCallback,\n                piiLoggingEnabled: this.config.system.loggerOptions\n                    .piiLoggingEnabled,\n                correlationId: requestCorrelationId\n            },\n            cryptoInterface: this.cryptoProvider,\n            networkInterface: this.config.system.networkClient,\n            storageInterface: this.storage,\n            serverTelemetryManager: serverTelemetryManager,\n            clientCredentials: {\n                clientSecret: this.clientSecret,\n                clientAssertion: this.clientAssertion ? this.getClientAssertion(discoveredAuthority) : undefined,\n            },\n            libraryInfo: {\n                sku: NodeConstants.MSAL_SKU,\n                version: version,\n                cpu: process.arch || \"\",\n                os: process.platform || \"\",\n            },\n            persistencePlugin: this.config.cache.cachePlugin,\n            serializableCache: this.tokenCache,\n        };\n    }\n\n    private getClientAssertion(authority: Authority): { assertion: string, assertionType: string } {\n        return {\n            assertion: this.clientAssertion.getJwt(this.cryptoProvider, this.config.auth.clientId, authority.tokenEndpoint),\n            assertionType: NodeConstants.JWT_BEARER_ASSERTION_TYPE\n        };\n    }\n\n    /**\n     * Generates a request with the default scopes & generates a correlationId.\n     * @param authRequest - BaseAuthRequest for initialization\n     */\n    protected initializeBaseRequest(authRequest: Partial<BaseAuthRequest>): BaseAuthRequest {\n        this.logger.verbose(\"initializeRequestScopes called\", authRequest.correlationId);\n        // Default authenticationScheme to Bearer, log that POP isn't supported yet\n        if (authRequest.authenticationScheme && authRequest.authenticationScheme === AuthenticationScheme.POP) {\n            this.logger.verbose(\"Authentication Scheme 'pop' is not supported yet, setting Authentication Scheme to 'Bearer' for request\", authRequest.correlationId);\n        }\n\n        authRequest.authenticationScheme = AuthenticationScheme.BEARER;\n\n        return {\n            ...authRequest,\n            scopes: [...((authRequest && authRequest.scopes) || []), ...OIDC_DEFAULT_SCOPES],\n            correlationId: authRequest && authRequest.correlationId || this.cryptoProvider.createNewGuid(),\n            authority: authRequest.authority || this.config.auth.authority\n        };\n    }\n\n    /**\n     * Initializes the server telemetry payload\n     * @param apiId - Id for a specific request\n     * @param correlationId - GUID\n     * @param forceRefresh - boolean to indicate network call\n     */\n    protected initializeServerTelemetryManager(apiId: number, correlationId: string, forceRefresh?: boolean): ServerTelemetryManager {\n        const telemetryPayload: ServerTelemetryRequest = {\n            clientId: this.config.auth.clientId,\n            correlationId: correlationId,\n            apiId: apiId,\n            forceRefresh: forceRefresh || false\n        };\n\n        return new ServerTelemetryManager(telemetryPayload, this.storage);\n    }\n\n    /**\n     * Create authority instance. If authority not passed in request, default to authority set on the application\n     * object. If no authority set in application object, then default to common authority.\n     * @param authorityString - authority from user configuration\n     */\n    private async createAuthority(authorityString: string, azureRegionConfiguration?: AzureRegionConfiguration, requestCorrelationId?: string, azureCloudOptions?: AzureCloudOptions): Promise<Authority> {\n        this.logger.verbose(\"createAuthority called\", requestCorrelationId);\n\n        // build authority string based on auth params - azureCloudInstance is prioritized if provided\n        const authorityUrl = Authority.generateAuthority(authorityString, azureCloudOptions);\n\n        const authorityOptions: AuthorityOptions = {\n            protocolMode: this.config.auth.protocolMode,\n            knownAuthorities: this.config.auth.knownAuthorities,\n            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n            authorityMetadata: this.config.auth.authorityMetadata,\n            azureRegionConfiguration\n        };\n\n        return await AuthorityFactory.createDiscoveredInstance(authorityUrl, this.config.system.networkClient, this.storage, authorityOptions);\n    }\n}\n","/* eslint-disable header/header */\nexport const name = \"@azure/msal-node\";\nexport const version = \"1.6.0\";\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { JwtHeader, sign } from \"jsonwebtoken\";\nimport { TimeUtils, ClientAuthError } from \"@azure/msal-common\";\nimport { CryptoProvider } from \"../crypto/CryptoProvider\";\nimport { EncodingUtils } from \"../utils/EncodingUtils\";\nimport { JwtConstants } from \"../utils/Constants\";\n\n/**\n * Client assertion of type jwt-bearer used in confidential client flows\n * @public\n */\nexport class ClientAssertion {\n\n    private jwt: string;\n    private privateKey: string;\n    private thumbprint: string;\n    private expirationTime: number;\n    private issuer: string;\n    private jwtAudience: string;\n    private publicCertificate: Array<string>;\n\n    /**\n     * Initialize the ClientAssertion class from the clientAssertion passed by the user\n     * @param assertion - refer https://tools.ietf.org/html/rfc7521\n     */\n    public static fromAssertion(assertion: string): ClientAssertion {\n        const clientAssertion = new ClientAssertion();\n        clientAssertion.jwt = assertion;\n        return clientAssertion;\n    }\n\n    /**\n     * Initialize the ClientAssertion class from the certificate passed by the user\n     * @param thumbprint - identifier of a certificate\n     * @param privateKey - secret key\n     * @param publicCertificate - electronic document provided to prove the ownership of the public key\n     */\n    public static fromCertificate(thumbprint: string, privateKey: string, publicCertificate?: string): ClientAssertion {\n        const clientAssertion = new ClientAssertion();\n        clientAssertion.privateKey = privateKey;\n        clientAssertion.thumbprint = thumbprint;\n        if (publicCertificate) {\n            clientAssertion.publicCertificate = this.parseCertificate(publicCertificate);\n        }\n        return clientAssertion;\n    }\n\n    /**\n     * Update JWT for certificate based clientAssertion, if passed by the user, uses it as is\n     * @param cryptoProvider - library's crypto helper\n     * @param issuer - iss claim\n     * @param jwtAudience - aud claim\n     */\n    public getJwt(cryptoProvider: CryptoProvider, issuer: string, jwtAudience: string): string {\n        // if assertion was created from certificate, check if jwt is expired and create new one.\n        if (this.privateKey && this.thumbprint) {\n\n            if (this.jwt && !this.isExpired() && issuer === this.issuer && jwtAudience === this.jwtAudience) {\n                return this.jwt;\n            }\n\n            return this.createJwt(cryptoProvider, issuer, jwtAudience);\n        }\n\n        /*\n         * if assertion was created by caller, then we just append it. It is up to the caller to\n         * ensure that it contains necessary claims and that it is not expired.\n         */\n        if (this.jwt) {\n            return this.jwt;\n        }\n\n        throw ClientAuthError.createInvalidAssertionError();\n    }\n\n    /**\n     * JWT format and required claims specified: https://tools.ietf.org/html/rfc7523#section-3\n     */\n    private createJwt(cryptoProvider: CryptoProvider, issuer: string, jwtAudience: string): string {\n\n        this.issuer = issuer;\n        this.jwtAudience = jwtAudience;\n        const issuedAt = TimeUtils.nowSeconds();\n        this.expirationTime = issuedAt + 600;\n\n        const header: JwtHeader = {\n            alg: JwtConstants.RSA_256,\n            x5t: EncodingUtils.base64EncodeUrl(this.thumbprint, \"hex\")\n        };\n\n        if (this.publicCertificate) {\n            Object.assign(header, {\n                x5c: this.publicCertificate\n            } as Partial<JwtHeader>);\n        }\n\n        const payload = {\n            [JwtConstants.AUDIENCE]: this.jwtAudience,\n            [JwtConstants.EXPIRATION_TIME]: this.expirationTime,\n            [JwtConstants.ISSUER]: this.issuer,\n            [JwtConstants.SUBJECT]: this.issuer,\n            [JwtConstants.NOT_BEFORE]: issuedAt,\n            [JwtConstants.JWT_ID]: cryptoProvider.createNewGuid()\n        };\n\n        this.jwt = sign(payload, this.privateKey, { header });\n        return this.jwt;\n    }\n\n    /**\n     * Utility API to check expiration\n     */\n    private isExpired(): boolean {\n        return this.expirationTime < TimeUtils.nowSeconds();\n    }\n\n    /**\n     * Extracts the raw certs from a given certificate string and returns them in an array.\n     * @param publicCertificate - electronic document provided to prove the ownership of the public key\n     */\n    public static parseCertificate(publicCertificate: string): Array<string> {\n        /**\n         * This is regex to identify the certs in a given certificate string.\n         * We want to look for the contents between the BEGIN and END certificate strings, without the associated newlines.\n         * The information in parens \"(.+?)\" is the capture group to represent the cert we want isolated.\n         * \".\" means any string character, \"+\" means match 1 or more times, and \"?\" means the shortest match.\n         * The \"g\" at the end of the regex means search the string globally, and the \"s\" enables the \".\" to match newlines.\n         */\n        const regexToFindCerts = /-----BEGIN CERTIFICATE-----\\n(.+?)\\n-----END CERTIFICATE-----/gs;\n        const certs: string[] = [];\n\n        let matches;\n        while ((matches = regexToFindCerts.exec(publicCertificate)) !== null) {\n            // matches[1] represents the first parens capture group in the regex.\n            certs.push(matches[1].replace(/\\n/, \"\"));\n        }\n\n        return certs;\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientApplication } from \"./ClientApplication\";\nimport { Configuration } from \"../config/Configuration\";\nimport { ClientAssertion } from \"./ClientAssertion\";\nimport { ApiId , REGION_ENVIRONMENT_VARIABLE } from \"../utils/Constants\";\nimport {\n    ClientCredentialClient,\n    OnBehalfOfClient,\n    CommonClientCredentialRequest,\n    CommonOnBehalfOfRequest,\n    AuthenticationResult,\n    StringUtils,\n    ClientAuthError,\n    AzureRegionConfiguration,\n    AuthError\n} from \"@azure/msal-common\";\nimport { IConfidentialClientApplication } from \"./IConfidentialClientApplication\";\nimport { OnBehalfOfRequest } from \"../request/OnBehalfOfRequest\";\nimport { ClientCredentialRequest } from \"../request/ClientCredentialRequest\";\n\n/**\n *  This class is to be used to acquire tokens for confidential client applications (webApp, webAPI). Confidential client applications\n *  will configure application secrets, client certificates/assertions as applicable\n * @public\n */\nexport class ConfidentialClientApplication extends ClientApplication implements IConfidentialClientApplication{\n\n    /**\n     * Constructor for the ConfidentialClientApplication\n     *\n     * Required attributes in the Configuration object are:\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our application registration portal\n     * - authority: the authority URL for your application.\n     * - client credential: Must set either client secret, certificate, or assertion for confidential clients. You can obtain a client secret from the application registration portal.\n     *\n     * In Azure AD, authority is a URL indicating of the form https://login.microsoftonline.com/\\{Enter_the_Tenant_Info_Here\\}.\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\n     *\n     * In Azure B2C, authority is of the form https://\\{instance\\}/tfp/\\{tenant\\}/\\{policyName\\}/\n     * Full B2C functionality will be available in this library in future versions.\n     *\n     * @param Configuration - configuration object for the MSAL ConfidentialClientApplication instance\n     */\n    constructor(configuration: Configuration) {\n        super(configuration);\n        this.setClientCredential(this.config);\n    }\n\n    /**\n     * Acquires tokens from the authority for the application (not for an end user).\n     */\n    public async acquireTokenByClientCredential(request: ClientCredentialRequest): Promise<AuthenticationResult | null> {\n        this.logger.info(\"acquireTokenByClientCredential called\", request.correlationId);\n        const validRequest: CommonClientCredentialRequest = {\n            ...request,\n            ...this.initializeBaseRequest(request)\n        };\n        const azureRegionConfiguration: AzureRegionConfiguration = {\n            azureRegion: validRequest.azureRegion,\n            environmentRegion: process.env[REGION_ENVIRONMENT_VARIABLE]\n        };\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenByClientCredential, validRequest.correlationId, validRequest.skipCache);\n        try {\n            const clientCredentialConfig = await this.buildOauthClientConfiguration(\n                validRequest.authority,\n                validRequest.correlationId,\n                serverTelemetryManager,\n                azureRegionConfiguration,\n                request.azureCloudOptions\n            );\n            const clientCredentialClient = new ClientCredentialClient(clientCredentialConfig);\n            this.logger.verbose(\"Client credential client created\", validRequest.correlationId);\n            return clientCredentialClient.acquireToken(validRequest);\n        } catch(e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(validRequest.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }\n    }\n\n    /**\n     * Acquires tokens from the authority for the application.\n     *\n     * Used in scenarios where the current app is a middle-tier service which was called with a token\n     * representing an end user. The current app can use the token (oboAssertion) to request another\n     * token to access downstream web API, on behalf of that user.\n     *\n     * The current middle-tier app has no user interaction to obtain consent.\n     * See how to gain consent upfront for your middle-tier app from this article.\n     * https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#gaining-consent-for-the-middle-tier-application\n     */\n    public async acquireTokenOnBehalfOf(request: OnBehalfOfRequest): Promise<AuthenticationResult | null> {\n        this.logger.info(\"acquireTokenOnBehalfOf called\", request.correlationId);\n        const validRequest: CommonOnBehalfOfRequest = {\n            ...request,\n            ...this.initializeBaseRequest(request)\n        };\n        try {\n            const clientCredentialConfig = await this.buildOauthClientConfiguration(\n                validRequest.authority,\n                validRequest.correlationId,\n                undefined,\n                undefined,\n                request.azureCloudOptions\n            );\n            const oboClient = new OnBehalfOfClient(clientCredentialConfig);\n            this.logger.verbose(\"On behalf of client created\", validRequest.correlationId);\n            return oboClient.acquireToken(validRequest);\n        } catch (e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(validRequest.correlationId);\n            }\n            throw e;\n        }\n    }\n\n    private setClientCredential(configuration: Configuration): void {\n\n        const clientSecretNotEmpty = !StringUtils.isEmpty(configuration.auth.clientSecret);\n        const clientAssertionNotEmpty = !StringUtils.isEmpty(configuration.auth.clientAssertion);\n        const certificate = configuration.auth.clientCertificate || {\n            thumbprint: \"\",\n            privateKey: \"\"\n        };\n        const certificateNotEmpty = !StringUtils.isEmpty(certificate.thumbprint) || !StringUtils.isEmpty(certificate.privateKey);\n\n        // Check that at most one credential is set on the application\n        if (\n            clientSecretNotEmpty && clientAssertionNotEmpty ||\n            clientAssertionNotEmpty && certificateNotEmpty ||\n            clientSecretNotEmpty && certificateNotEmpty) {\n            throw ClientAuthError.createInvalidCredentialError();\n        }\n\n        if (configuration.auth.clientSecret) {\n            this.clientSecret = configuration.auth.clientSecret;\n            return;\n        }\n\n        if (configuration.auth.clientAssertion) {\n            this.clientAssertion = ClientAssertion.fromAssertion(configuration.auth.clientAssertion);\n            return;\n        }\n\n        if (!certificateNotEmpty) {\n            throw ClientAuthError.createInvalidCredentialError();\n        } else {\n            this.clientAssertion = ClientAssertion.fromCertificate(certificate.thumbprint, certificate.privateKey, configuration.auth.clientCertificate?.x5c);\n        }\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AccountEntity, ICachePlugin, TokenCacheContext } from \"@azure/msal-common\";\nimport { TokenCache } from \"../TokenCache\";\nimport { IPartitionManager } from \"./IPartitionManager\";\nimport { ICacheClient } from \"./ICacheClient\";\n\nexport class DistributedCachePlugin implements ICachePlugin {\n    private client: ICacheClient;\n    private partitionManager: IPartitionManager;\n\n    constructor(client: ICacheClient, partitionManager: IPartitionManager) {\n        this.client = client;\n        this.partitionManager = partitionManager;\n    }\n  \n    public async beforeCacheAccess(cacheContext: TokenCacheContext): Promise<void> {\n        const partitionKey = await this.partitionManager.getKey();\n        const cacheData = await this.client.get(partitionKey);\n        cacheContext.tokenCache.deserialize(cacheData);\n    }\n  \n    public async afterCacheAccess(cacheContext: TokenCacheContext): Promise<void> {\n        if (cacheContext.cacheHasChanged) {\n            const kvStore = (cacheContext.tokenCache as TokenCache).getKVStore();\n            const accountEntities = Object.values(kvStore).filter(value => AccountEntity.isAccountEntity(value as object));\n\n            if (accountEntities.length > 0) {\n                const accountEntity = accountEntities[0] as AccountEntity;\n                const partitionKey = await this.partitionManager.extractKey(accountEntity);\n                          \n                await this.client.set(partitionKey, cacheContext.tokenCache.serialize());           \n            }\n        }\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ApiId } from \"../utils/Constants\";\nimport {\n    DeviceCodeClient,\n    AuthenticationResult,\n    CommonDeviceCodeRequest,\n    AuthError\n} from \"@azure/msal-common\";\nimport { Configuration } from \"../config/Configuration\";\nimport { ClientApplication } from \"./ClientApplication\";\nimport { IPublicClientApplication } from \"./IPublicClientApplication\";\nimport { DeviceCodeRequest } from \"../request/DeviceCodeRequest\";\n\n/**\n * This class is to be used to acquire tokens for public client applications (desktop, mobile). Public client applications\n * are not trusted to safely store application secrets, and therefore can only request tokens in the name of an user.\n * @public\n */\nexport class PublicClientApplication extends ClientApplication implements IPublicClientApplication {\n    /**\n     * Important attributes in the Configuration object for auth are:\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal.\n     * - authority: the authority URL for your application.\n     *\n     * AAD authorities are of the form https://login.microsoftonline.com/\\{Enter_the_Tenant_Info_Here\\}.\n     * - If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\n     * - If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\n     * - If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\n     * - To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\n     *\n     * Azure B2C authorities are of the form https://\\{instance\\}/\\{tenant\\}/\\{policy\\}. Each policy is considered\n     * its own authority. You will have to set the all of the knownAuthorities at the time of the client application\n     * construction.\n     *\n     * ADFS authorities are of the form https://\\{instance\\}/adfs.\n     */\n    constructor(configuration: Configuration) {\n        super(configuration);\n    }\n\n    /**\n     * Acquires a token from the authority using OAuth2.0 device code flow.\n     * This flow is designed for devices that do not have access to a browser or have input constraints.\n     * The authorization server issues a DeviceCode object with a verification code, an end-user code,\n     * and the end-user verification URI. The DeviceCode object is provided through a callback, and the end-user should be\n     * instructed to use another device to navigate to the verification URI to input credentials.\n     * Since the client cannot receive incoming requests, it polls the authorization server repeatedly\n     * until the end-user completes input of credentials.\n     */\n    public async acquireTokenByDeviceCode(request: DeviceCodeRequest): Promise<AuthenticationResult | null> {\n        this.logger.info(\"acquireTokenByDeviceCode called\", request.correlationId);\n        const validRequest: CommonDeviceCodeRequest = Object.assign(request, this.initializeBaseRequest(request));\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenByDeviceCode, validRequest.correlationId);\n        try {\n            const deviceCodeConfig = await this.buildOauthClientConfiguration(\n                validRequest.authority,\n                validRequest.correlationId,\n                serverTelemetryManager,\n                undefined,\n                request.azureCloudOptions\n            );\n            const deviceCodeClient = new DeviceCodeClient(deviceCodeConfig);\n            this.logger.verbose(\"Device code client created\", validRequest.correlationId);\n            return deviceCodeClient.acquireToken(validRequest);\n        } catch (e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(validRequest.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }\n    }\n}\n"],"names":["HttpMethod","CharSet","ApiId","HttpClient","url","options","request","method","GET","headers","validateStatus","proxyUrl","proxy","httpsAgent","createHttpsProxyAgent","response","axios","body","data","status","cancellationToken","POST","timeout","DEFAULT_AUTH_OPTIONS","clientId","authority","Constants","DEFAULT_AUTHORITY","clientSecret","clientAssertion","clientCertificate","thumbprint","privateKey","x5c","knownAuthorities","cloudDiscoveryMetadata","authorityMetadata","clientCapabilities","protocolMode","ProtocolMode","AAD","azureCloudOptions","azureCloudInstance","AzureCloudInstance","None","tenant","DEFAULT_CACHE_OPTIONS","DEFAULT_SYSTEM_OPTIONS","loggerOptions","loggerCallback","piiLoggingEnabled","logLevel","LogLevel","Info","networkClient","getNetworkClient","buildAppConfiguration","auth","cache","system","EncodingUtils","str","encoding","Buffer","from","toString","base64Encode","replace","base64Str","length","base64Decode","PkceGenerator","verifier","this","generateCodeVerifier","challenge","generateCodeChallengeFromVerifier","charArr","maxNumber","byte","crypto","randomBytes","push","join","base64EncodeUrl","codeVerifier","sha256","buffer","createHash","update","digest","CryptoProvider","constructor","pkceGenerator","createNewGuid","uuidv4","guid","test","generateGuid","input","generatePkceCodes","getPublicKeyThumbprint","Error","removeTokenBindingKey","clearKeystore","signJwt","hashString","Deserializer","jsonFile","StringUtils","isEmpty","JSON","parse","accounts","accountObjects","Object","keys","map","key","serializedAcc","mappedAcc","homeAccountId","home_account_id","environment","realm","localAccountId","local_account_id","username","authorityType","authority_type","name","clientInfo","client_info","lastModificationTime","last_modification_time","lastModificationApp","last_modification_app","account","AccountEntity","CacheManager","toObject","idTokens","idObjects","serializedIdT","mappedIdT","credentialType","credential_type","client_id","secret","idToken","IdTokenEntity","accessTokens","atObjects","serializedAT","mappedAT","target","cachedAt","cached_at","expiresOn","expires_on","extendedExpiresOn","extended_expires_on","refreshOn","refresh_on","keyId","key_id","tokenType","token_type","accessToken","AccessTokenEntity","refreshTokens","rtObjects","serializedRT","mappedRT","familyId","family_id","refreshToken","RefreshTokenEntity","appMetadata","appMetadataObjects","serializedAmdt","mappedAmd","amd","AppMetadataEntity","jsonCache","Account","deserializeAccounts","IdToken","deserializeIdTokens","AccessToken","deserializeAccessTokens","RefreshToken","deserializeRefreshTokens","AppMetadata","deserializeAppMetadata","Serializer","stringify","accCache","accountEntity","idTCache","idTEntity","atCache","atEntity","rtCache","rtEntity","amdtCache","amdtEntity","inMemCache","serializeAccounts","serializeIdTokens","serializeAccessTokens","serializeRefreshTokens","serializeAppMetadata","NodeStorage","logger","cryptoImpl","registerChangeEmitter","func","changeEmitters","emitChange","forEach","call","cacheToInMemoryCache","inMemoryCache","inMemoryCacheToCache","getCache","getInMemoryCache","trace","setInMemoryCache","setCache","getItem","tracePii","setItem","value","getAccount","accountKey","isAccountEntity","setAccount","generateAccountKey","getIdTokenCredential","idTokenKey","isIdTokenEntity","setIdTokenCredential","generateCredentialKey","getAccessTokenCredential","accessTokenKey","isAccessTokenEntity","setAccessTokenCredential","getRefreshTokenCredential","refreshTokenKey","isRefreshTokenEntity","setRefreshTokenCredential","getAppMetadata","appMetadataKey","isAppMetadataEntity","setAppMetadata","generateAppMetadataKey","getServerTelemetry","serverTelemetrykey","serverTelemetryEntity","ServerTelemetryEntity","isServerTelemetryEntity","setServerTelemetry","serverTelemetryKey","serverTelemetry","getAuthorityMetadata","authorityMetadataEntity","AuthorityMetadataEntity","isAuthorityMetadataEntity","getAuthorityMetadataKeys","getKeys","filter","isAuthorityMetadata","setAuthorityMetadata","metadata","getThrottlingCache","throttlingCacheKey","throttlingCache","ThrottlingEntity","isThrottlingEntity","setThrottlingCache","removeItem","result","containsKey","includes","deserializeAllCache","deserializeJSONBlob","serializeAllCache","updateCredentialCacheKey","currentCacheKey","credential","updatedCacheKey","cacheItem","verbose","error","defaultSerializedCache","TokenCache","storage","cachePlugin","cacheHasChanged","handleChangeEvent","bind","persistence","hasChanged","serialize","finalState","cacheSnapshot","mergeState","deserialize","deserializedCache","overlayDefaults","getKVStore","cacheContext","TokenCacheContext","beforeCacheAccess","getAllAccounts","afterCacheAccess","allAccounts","accountObj","removeAccount","generateAccountCacheKey","oldState","currentState","stateAfterRemoval","mergeRemovals","mergeUpdates","newState","newKey","newValue","hasOwnProperty","newValueNotNull","newValueIsObject","newValueIsNotArray","Array","isArray","oldStateNotUndefinedOrNull","mergeRemovalsDict","oldKey","passedInCache","ClientApplication","configuration","config","cryptoProvider","Logger","tokenCache","info","correlationId","validRequest","initializeBaseRequest","responseMode","ResponseMode","QUERY","authenticationScheme","AuthenticationScheme","BEARER","authClientConfig","buildOauthClientConfiguration","undefined","authorizationCodeClient","AuthorizationCodeClient","getAuthCodeUrl","serverTelemetryManager","initializeServerTelemetryManager","acquireTokenByCode","acquireToken","e","AuthError","setCorrelationId","cacheFailedRequest","acquireTokenByRefreshToken","refreshTokenClientConfig","refreshTokenClient","RefreshTokenClient","forceRefresh","acquireTokenSilent","silentFlowClientConfig","silentFlowClient","SilentFlowClient","acquireTokenByUsernamePassword","usernamePasswordClientConfig","usernamePasswordClient","UsernamePasswordClient","getTokenCache","getLogger","setLogger","requestCorrelationId","azureRegionConfiguration","userAzureCloudOptions","discoveredAuthority","createAuthority","updateRegionDiscoveryMetadata","regionDiscoveryMetadata","authOptions","systemOptions","cryptoInterface","networkInterface","storageInterface","clientCredentials","getClientAssertion","libraryInfo","sku","version","cpu","process","arch","os","platform","persistencePlugin","serializableCache","assertion","getJwt","tokenEndpoint","assertionType","authRequest","POP","scopes","OIDC_DEFAULT_SCOPES","apiId","ServerTelemetryManager","authorityString","authorityUrl","Authority","generateAuthority","authorityOptions","AuthorityFactory","createDiscoveredInstance","ClientAssertion","jwt","publicCertificate","parseCertificate","issuer","jwtAudience","isExpired","createJwt","ClientAuthError","createInvalidAssertionError","issuedAt","TimeUtils","nowSeconds","expirationTime","header","alg","x5t","assign","payload","sign","regexToFindCerts","certs","matches","exec","setClientCredential","azureRegion","environmentRegion","env","acquireTokenByClientCredential","skipCache","clientCredentialConfig","clientCredentialClient","ClientCredentialClient","oboClient","OnBehalfOfClient","clientSecretNotEmpty","clientAssertionNotEmpty","certificate","certificateNotEmpty","createInvalidCredentialError","fromAssertion","fromCertificate","_configuration$auth$c","client","partitionManager","partitionKey","getKey","cacheData","get","kvStore","accountEntities","values","extractKey","set","acquireTokenByDeviceCode","deviceCodeConfig","deviceCodeClient","DeviceCodeClient"],"mappings":"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"}